# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yVDzNjRPQa2apbMobR9SFKu_xpvkTONV
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
import numpy as np

# Load the data (assuming the df is already loaded from the preceding code)
# If not, you would need to add the data loading code here.
# Example:
# file_path = '/content/drive/MyDrive/Korban_bencana.csv'
# df = pd.read_csv(file_path, sep=';', engine='python')


def page_dataset_viz():
    st.title("Halaman 1: Dataset, Karakteristik, dan Visualisasi")

    st.header("Dataset")
    st.write(df.head())

    st.header("Karakteristik Data")
    st.write(df.describe())
    st.write("Tipe Data:")
    st.write(df.dtypes)

    st.header("Visualisasi Data")
    # Example visualizations (adjust based on your data)
    st.subheader("Distribusi Kolom Numerik")
    numeric_cols = df.select_dtypes(include=np.number).columns
    for col in numeric_cols:
        plt.figure(figsize=(8, 4))
        sns.histplot(df[col], kde=True)
        st.pyplot(plt)
        plt.close()

    st.subheader("Korelasi Antar Kolom Numerik")
    plt.figure(figsize=(10, 8))
    sns.heatmap(df[numeric_cols].corr(), annot=True, cmap='coolwarm')
    st.pyplot(plt)
    plt.close()


def page_model_training():
    st.title("Halaman 2: Pelatihan Model")

    st.header("Persiapan Data untuk Pelatihan")
    st.write("Pisahkan fitur (X) dan target (y).")

    # Assuming 'Jumlah Korban' is the target variable. Adjust as needed.
    if 'Jumlah Korban' in df.columns:
        X = df.drop('Jumlah Korban', axis=1)
        y = df['Jumlah Korban']

        # Handle non-numeric features if necessary (e.g., one-hot encoding)
        # For simplicity, let's assume all relevant features are numeric or handled.
        X = X.select_dtypes(include=np.number).dropna()
        y = y.loc[X.index] # Align y with X after dropping NaNs

        if not X.empty and not y.empty:
            st.write("Data fitur (X) dan target (y) berhasil disiapkan.")
            st.write("Contoh X:")
            st.write(X.head())
            st.write("Contoh y:")
            st.write(y.head())

            st.header("Pelatihan Model (Random Forest Regressor)")
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

            model = RandomForestRegressor(n_estimators=100, random_state=42)
            model.fit(X_train, y_train)

            st.write("Model berhasil dilatih!")

            st.subheader("Evaluasi Model")
            score = model.score(X_test, y_test)
            st.write(f"RÂ² Score pada data uji: {score:.4f}")

            # Store the trained model and feature names in session state
            st.session_state['model'] = model
            st.session_state['feature_names'] = X.columns.tolist()
        else:
             st.warning("Tidak cukup data numerik untuk pelatihan model setelah membersihkan data.")

    else:
        st.error("Kolom target 'Jumlah Korban' tidak ditemukan dalam dataset.")


def page_prediction_form():
    st.title("Halaman 3: Formulir Prediksi")

    if 'model' in st.session_state and 'feature_names' in st.session_state:
        model = st.session_state['model']
        feature_names = st.session_state['feature_names']

        st.header("Masukkan Nilai untuk Prediksi")

        # Create input fields for each feature
        input_data = {}
        for feature in feature_names:
            # You might need to adjust the input type based on the feature
            input_data[feature] = st.number_input(f"Masukkan nilai untuk '{feature}'", value=0.0)

        if st.button("Prediksi Jumlah Korban"):
            # Prepare the input data for prediction
            input_df = pd.DataFrame([input_data])

            # Ensure input features match the training features
            # Add missing columns with default values (e.g., 0)
            for col in feature_names:
                if col not in input_df.columns:
                    input_df[col] = 0

            # Reorder columns to match the training data
            input_df = input_df[feature_names]

            try:
                prediction = model.predict(input_df)
                st.subheader("Hasil Prediksi")
                st.success(f"Prediksi Jumlah Korban: {prediction[0]:.2f}")
            except Exception as e:
                st.error(f"Terjadi kesalahan saat melakukan prediksi: {e}")

    else:
        st.warning("Model belum dilatih. Silakan kunjungi halaman 'Pelatihan Model' terlebih dahulu.")


# Navigation
st.sidebar.title("Navigasi")
page = st.sidebar.radio("Pilih Halaman", ["Dataset dan Visualisasi", "Pelatihan Model", "Formulir Prediksi"])

if page == "Dataset dan Visualisasi":
    page_dataset_viz()
elif page == "Pelatihan Model":
    page_model_training()
elif page == "Formulir Prediksi":
    page_prediction_form()